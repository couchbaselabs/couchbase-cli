#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
couchbase-cli - command-line cluster administration tool
"""

import getopt
import sys

import listservers
import buckets
import node
import xdcr
import info
import util_cli as util
from usage import usage, short_usage
from timeout import TimeoutException


def main():
    for x in sys.argv:
        if x in ('-h', '-H', '--help', 'help'):
            usage()

    if len(sys.argv) <= 2:
        short_usage()

    debug = False

    (cluster, user, password) = ('', '', '')

    try:
        (opts, _args) = getopt.getopt(sys.argv[2:],
                                     'a:b:c:dse:gdlmo:OPp:r:Ssu:vV', [
                'cluster=',
                'debug',
                'storage',
                'password=',
                'user=',
                'mem',
                'output=',
                'os',
                'ports',
                'stats',
                'license',
                'server-add=',
                'server-add-username=',
                'server-add-password=',
                'server-remove=',
                'server-failover=',
                'cluster-init=',
                'cluster-init-username=',
                'cluster-username=',
                'cluster-init-password=',
                'cluster-password=',
                'cluster-init-port=',
                'cluster-port=',
                'cluster-init-ramsize=',
                'cluster-ramsize=',
                'enable-autofailover=',
                'autofailover-timeout=',
                'enable-notification=',
                'enable-email-alert=',
                'compaction-db-percentage=',
                'compaction-db-size=',
                'compaction-view-percentage=',
                'compaction-view-size=',
                'compaction-period-from=',
                'compaction-period-to=',
                'enable-compaction-abort=',
                'enable-compaction-parallel=',
                'metadata-purge-interval=',
                'node-init=',
                'node-init-data-path=',
                'node-init-index-path=',
                'bucket=',
                'bucket-type=',
                'bucket-port=',
                'bucket-password=',
                'bucket-ramsize=',
                'bucket-replica=',
                'enable-flush=',
                'enable-index-replica=',
                'wait',
                'force',
                'data-only',
                'view-only',
                'version',
                'xdcr-cluster-name=',
                'xdcr-hostname=',
                'xdcr-username=',
                'xdcr-password=',
                'xdcr-from-bucket=',
                'xdcr-to-bucket=',
                'xdcr-replicator=',
                'xdcr-replication-mode=',
                'create',
                'edit',
                'delete',
                'list',
                'set',
                'ro-username=',
                'ro-password=',
                'max-concurrent-reps=',
                'checkpoint-interval=',
                'worker-batch-size='
                'doc-batch-size=',
                'failure-restart-interval=',
                'optimistic-replication-threshold=',
                'email-recipients=',
                'email-sender=',
                'email-user=',
                'email-password=',
                'email-host=',
                'email-port=',
                'enable-email-encrypt=',
                'alert-auto-failover-node',
                'alert-auto-failover-max-reached',
                'alert-auto-failover-node-down',
                'alert-auto-failover-cluster-small',
                'alert-ip-changed',
                'alert-disk-space',
                'alert-meta-overhead',
                'alert-meta-oom',
                'alert-write-failed',
                'group-name=',
                'rename=',
                'add-servers=',
                'move-servers=',
                'from-group=',
                'to-group=',
                ])
    except getopt.GetoptError, err:
        usage(err)
    if len(_args) > 0:
        err_message = ("Possible missing '--' in front of one of parameters '%s'," +
                       " please see -h for more help.") % _args
        usage(err_message)
    commands = {
        'host-list'         : listservers.ListServers,
        'server-list'       : listservers.ListServers,
        'server-info'       : info.Info,
        'server-eshell'     : info.Info,
        'server-add'        : node.Node,
        'server-readd'      : node.Node,
        'group-manage'      : node.Node,
        'rebalance'         : node.Node,
        'rebalance-stop'    : node.Node,
        'rebalance-status'  : node.Node,
        'eject-server'      : node.Node,
        'failover'          : node.Node,
        'cluster-init'      : node.Node,
        'cluster-edit'      : node.Node,
        'node-init'         : node.Node,
        'user-manage'       : node.Node,
        'bucket-list'       : buckets.Buckets,
        'bucket-create'     : buckets.Buckets,
        'bucket-edit'       : buckets.Buckets,
        'bucket-delete'     : buckets.Buckets,
        'bucket-flush'      : buckets.Buckets,
        'bucket-compact'    : buckets.Buckets,
        'setting-compaction'    : node.Node,
        'setting-notification'  : node.Node,
        'setting-autofailover'  : node.Node,
        'setting-alert'         : node.Node,
        'setting-xdcr'          : xdcr.XDCR,
        'xdcr-setup'            : xdcr.XDCR,
        'xdcr-replicate'        : xdcr.XDCR,
        }

    cmd = sys.argv[1]

    if cmd not in commands:
        err_message = ("'%s' is not a couchbase-cli command;" +
                       " please see -h for more help.") % cmd
        usage(err_message)

    for (opt, arg) in opts:
        if opt in ('-c', '--cluster'):
            cluster = arg
        if opt in ('-u', '--user'):
            user = arg
        if opt in ('-p', '--password'):
            password = arg
        if opt in ('-d', '--debug'):
            debug = True

    if not cluster:
        usage("please provide a CLUSTER, or use -h for more help.")

    server, port = util.hostport(cluster)

    if debug:
        print "INFO: running command: %s" % cmd

    c = commands[cmd]()
    try:
        c.runCmd(cmd, server, port, user, password, opts)
    except TimeoutException, err:
        print "TIMED OUT: command: %s: %s:%d, %s" % (cmd, server, port, err)
        sys.exit(1)
    except KeyboardInterrupt:
        print "INTERRUPTED: command: %s: %s:%d" % (cmd, server, port)
        sys.exit(1)
    except Exception, err:
        print "ERROR: command: %s: %s:%d, %s" % (cmd, server, port, err)
        sys.exit(1)

if __name__ == '__main__':
    main()
